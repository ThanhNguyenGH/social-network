// Log session Redis
app.use(async (req, res, next) => {
  if (req.session?.user) {
    try {
      const sessionId = req.sessionID;
      const sessionData = await redisClient.get(`sess:${sessionId}`);
      console.log(`[Redis session] sess:${sessionId} => ${sessionData ? 'Found' : 'Not found'}`);
    } catch (err) {
      console.error('[Redis session] Error:', err.message);
    }
  }
  next();
});

// Log POST request sau khi parse
app.use((req, res, next) => {
  if (req.method === 'POST') {
    console.log('POST Request Headers:', {
      'content-type': req.headers['content-type'],
      'content-length': req.headers['content-length']
    });
    console.log('POST Request Body:', req.body);
  }
  next();
});

// Xử lý lỗi CSRF
app.use((err, req, res, next) => {
  if (err.code === 'EBADCSRFTOKEN') {
    console.error('CSRF Error:', err);
    console.log('Session ID:', req.sessionID);
    console.log('Session Data:', req.session);
    console.log('CSRF Token Expected:', req.csrfToken ? req.csrfToken() : 'Not available');
    console.log('CSRF Token Received:', req.body ? req.body._csrf : 'Not available');
    return res.status(403).render('pages/error', {
      message: 'Invalid CSRF token. Please refresh the page and try again.',
      user: req.session.user,
      layout: 'layouts/main'
    });
  }
  next(err);
});

// Xử lý lỗi Multer và uploadMedia
app.use((err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    console.error('Multer Error:', err);
    return res.status(400).render('pages/error', {
      message: `Multer error: ${err.message}`,
      user: req.session.user,
      layout: 'layouts/main'
    });
  }
  if (err.message === 'Only images (JPEG, PNG), videos (MP4, MOV), and audio (MP3, WAV) are allowed') {
    console.error('File Type Error:', err);
    return res.status(400).render('pages/home', {
      posts: [],
      user: req.session.user,
      csrfToken: res.locals.csrfToken,
      errors: [{ msg: err.message }],
      title: 'Home',
      layout: 'layouts/main'
    });
  }
  if (err.message === 'Only JPEG and PNG images are allowed') {
    console.error('File Type Error:', err);
    return res.status(400).render('pages/edit-profile', {
      user: req.session.user,
      errors: [{ msg: err.message }],
      csrfToken: res.locals.csrfToken,
      title: 'Edit Profile',
      layout: 'layouts/main'
    });
  }
  next(err);
});

//Chat
app.use(async (req, res, next) => {
  try {
    res.locals.csrfToken = req.csrfToken ? req.csrfToken() : '';
  } catch (err) {
    res.locals.csrfToken = '';
  }

  res.locals.currentUser = req.session.user || null;
  res.locals.user = res.locals.user;
  res.locals.friendId = null;
  res.locals.unreadMap = {};

  if (req.session.user && req.session.user._id) {
    console.log('[Session] User ID:', req.session.user._id); // Debug
    try {
      const user = await User.findById(req.session.user._id)
        .populate('friends', 'username avatar') 
        .lean();

      res.locals.friends = user.friends || [];

      const unreadCounts = await Message.aggregate([
        {
          $match: {
            receiver: mongoose.Types.ObjectId(req.session.user._id),
            isRead: false
          }
        },
        {
          $group: {
            _id: '$sender',
            count: { $sum: 1 }
          }
        }
      ]);

      unreadCounts.forEach(item => {
        res.locals.unreadMap[item._id.toString()] = item.count;
      });
    } catch (err) {
      console.error('Error fetching friends or unread messages:', err.message);
    }
  } else {
    console.log('[Session] No user session found'); // Debug
  }

  next();
});

//
console.log('User connected:', socket.id);

  socket.on('private_message', async (data) => {
    const { sender, receiver, content } = data;
    const newMsg = new Message({ sender, receiver, content });
    await newMsg.save();

    socket.to(receiver).emit('private_message', { sender, content });

    // Gửi về cho người nhận (nếu đang online)
    io.sockets.sockets.forEach((s) => {
      if (s.handshake.auth.userId === receiver) {
        s.emit('private_message', { sender, content });
      }
    });
  });
  
  // Lưu userId để gửi đúng người
  socket.on('auth', (userId) => {
    socket.handshake.auth = { userId };
  });

  //chat-modal.js:
  socket.on('private_message', ({ message, from }) => {
  if (from === currentChatUserId) {
    const chatBox = document.getElementById('chatMessages');
    const div = document.createElement('div');
    div.className = 'text-left';
    div.innerHTML = `<div class="inline-block px-3 py-2 m-1 rounded bg-gray-200"><p>${message.content}</p></div>`;
    chatBox.appendChild(div);
    chatBox.scrollTop = chatBox.scrollHeight;
  }
});